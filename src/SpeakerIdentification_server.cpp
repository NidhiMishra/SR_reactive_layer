// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "SpeakerIdentification.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "reactiveLayer.h"
#include "Behavior.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::imi;

class SpeakerIdentificationHandler : virtual public SpeakerIdentificationIf {
 public:
	 reactiveLayer *Decision;
  SpeakerIdentificationHandler() {
    // Your initialization goes here
  }

  SpeakerIdentificationHandler(reactiveLayer *aDecision) {
	  // Your initialization goes here
	  Decision = aDecision;
  }


  void speakerIdentified(const std::string& sensorID, const  ::imi::Microseconds timestamp, const std::string& name, const std::string& gender) {
    // Your implementation goes here

	  perceptualInput input;
	  input.sensorId = "SpeakerIdentification";
	  input.userName = name;

	  Decision->updateActivationLevels(input);

    printf("speakerIdentified\n");
  }

};



