// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#pragma once
#include "FaceService_server.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "AgentControl.h"
#include "ProtectedClient.h"
#include "I2P_types.h"
#include "reactiveLayer.h"
#include "Inputs_types.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;
using namespace  ::imi;
using namespace ::BB;

  FaceServiceHandler::FaceServiceHandler(reactiveLayer *aDecision) {
	  Decision=aDecision;
  }


  FaceStatus::type FaceServiceHandler::faceRecognized(const std::string& sensorID, const  ::imi::Microseconds timestamp, const std::string& name, const  ::imi::Vec2& position, const  ::imi::Facial_Expression::type exp) {
	  // Your implementation goes here
	  		
	  //Decision->facialExpressionDetected(exp);
	  printf("faceRecognized\n");
	  if(sensorID=="NadineCam")
	  {
		  Decision->updateGaze(position.x,position.y);
		   return FaceStatus::DONOTHING;
	  }
	  return Decision->faceRecognized(name);
  }

  void FaceServiceHandler::emotionRecognized(const std::string& sensorID, const  ::imi::Microseconds timestamp, const  ::imi::Emotion::type emotion, const std::string& name) {
	  // Your implementation goes here
	  printf("emotionRecognized\n");
  }

  FaceStatus::type FaceServiceHandler::updateFaceRecognitionStatus(const std::string& sensorID, const  ::imi::Microseconds timestamp, const FaceStatus::type status)
  {
	  // Your implementation goes here
	 // printf("updateFaceRecognitionStatus\n");
	  return Decision->updateFaceRecognitionStatus(timestamp, status);
  }


// 
// 
// 
//   void FaceServiceHandler::faceRecognized(const std::string& sensorID, const  ::imi::Microseconds timestamp, const std::string& name, const  ::imi::Vec2& position, const  ::imi::Facial_Expression::type exp)
//   {
//     // Your implementation goes here
// 
// 	Decision->faceRecognized(name);		
// 	Decision->facialExpressionDetected(exp);
// 
// 	
// 
//     //printf("faceRecognized\n");
//   }
// 
//   void FaceServiceHandler::emotionRecognized(const std::string& sensorID, const  ::imi::Microseconds timestamp, const  ::imi::Emotion::type emotion, const std::string& name)
//   {
//     printf("emotionRecognized\n");
//   }
// 
// 
// 
