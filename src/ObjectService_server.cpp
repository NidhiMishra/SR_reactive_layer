// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#pragma once
#include "ObjectService_server.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "AgentControl.h"
#include "ProtectedClient.h"
#include "I2P_types.h"
#include "reactiveLayer.h"
#include "Inputs_types.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;
using namespace  ::imi;
using namespace ::BB;

class executeAfterReturn
{
public:
	reactiveLayer *Decision;
	perceptualInput input;
	executeAfterReturn(reactiveLayer *aDecision, perceptualInput aInput)
	{
		Decision = aDecision;
		input = aInput;
	}
	~executeAfterReturn()
	{
		Decision->updateActivationLevels(input);
	}
};

  ObjectServiceHandler::ObjectServiceHandler(reactiveLayer *aDecision) {
	  Decision=aDecision;
  }


  void ObjectServiceHandler::objectRecognized(const std::vector< ::imi::ObjectInfo> & objects) {
    // Your implementation goes here
    //printf("objectRecognized\n");
	perceptualInput input;
	input.sensorId = "KinectForObject";
	input.behaviorType = "ReactObject";
	input.detectedObjects = objects;
	executeAfterReturn temp(Decision,input);
	return;
	//Decision->updateActivationLevels(input);
  }
