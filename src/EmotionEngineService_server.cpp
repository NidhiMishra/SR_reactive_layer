// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "EmotionEngineService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "reactiveLayer.h"
#include "Behavior.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::imi;
using namespace ::BB;

class EmotionEngineServiceHandler : virtual public EmotionEngineServiceIf {
 public:
	 reactiveLayer *decision;
  EmotionEngineServiceHandler(reactiveLayer *aDecision) {
	  decision=aDecision;
    // Your initialization goes here
  }

  void emotion(std::string& _return, const  ::imi::Microseconds timestamp, const std::string& emotion_type, const  ::imi::Vec3& emotion_pos, const double emotion_intensity, const  ::imi::Vec3& mood)
  {
		perceptualInput emoInput;
		emoInput.emotion=emotion_pos;
		emoInput.mood=mood;
		emoInput.sensorId="Emotion";
		decision->updateActivationLevels(emoInput);
		_return="";
  }

};


